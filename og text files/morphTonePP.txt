#include <Servo.h>
Servo myservo;  // create servo object to control a servo
// a maximum of eight servo objects can be created
int pos = 0;    // variable to store the servo position

///////////////////////////////////
// variables already defined //
///////////////////////////////////


int servoLowPos = 78;
int servoHighPos = 90;

int offer1_rew   = 0;
int offer1_light = 100;
int offer2_rew   = 3;
int offer2_light = 0;
int offer3_rew   = 3;
int offer3_light = 100;

const unsigned long rewardDeliveryDurationMsec = 50;

const int nLick1 = 3;
const int nLick2 = 5;

const int maxTrialNumber = 150;
const int maxRewardNumber = 0;
unsigned long maxSessionDurationMsec = 5400000;

unsigned long toneDurationMsec          =  2000;
unsigned long afterToneDelayMsec        =  1;
unsigned long afterDecisionDelayMsec    = 1000;
unsigned long reponsePeriodDurationMsec = 1500;
unsigned long consumptionPeriodMsec = 2000;

/const int toneOneFreq                         = 4000;
/const int toneTwoFreq                         = 8000;
/const int toneThreeFreq                       = 12000;

const int toneFiveFreq                      = 8000;
const int toneSixFreq                       = 7000;
const int toneSevenFreq                     = 6000;
const int toneEightFreq                     = 5000;
const int toneTwoFreq                       = 4000;


unsigned long itiMinDurationMsec        = 6000;
unsigned long itiMaxDurationMsec        = 14000;
unsigned long lightDurationMsec         = 10000;

//////////////////////////////////////////////////////////
// DECLARATION OF STATEs AND EVENTS
//////////////////////////////////////////////////////////
const int stateITI                = 1;
const int stateToneOn             = 2;
const int stateDelayAfterTone     = 3;
const int stateResponsePeriod     = 4;
const int stateDelayAfterDecision = 5;
const int stateLightOn            = 6;
const int stateWaitingFirstLick   = 7;
const int stateIRI                = 8;
const int stateExpDone            = 9;



// 1: for Reward and 0 for Reward and Light
int trialType = 0;
int trialTypeSize = 300;
int trialTypeArray[300];

////////////////////////////////////////////////
const int ledVoltage_mv = 5000;

const int protocol = 3;

////////////////////////////////////////
// variables used by the program only //
////////////////////////////////////////

//to establish a connection with Processing
int incomingByte;
boolean processingIsReady = false;

int i_loop = 0;
int nb_loop = 10;
//Time Measurment
unsigned long currentTimeMsec = 0; // current time
unsigned long previousTimeMsec = 0; // current time
unsigned long SessionStartTime = 0;

unsigned long delay1 = 0;
unsigned long delay2 = 0;

// Arduino Digital Output-Pins
const int lickoPin     = A0;
//const int lickoPin2     = A1;
const int servoPin     = 8;
const int toneOnePin   = 6;
const int toneTwoPin   = 7;
const int toneThreePin = 4;
const int solenoidPin  = 10;
const int ledMatrixPin = 5;

const int evt_LICK = 1;
const int evt_EOD = 2; //End Of Delay
const int evt_EOD2 = 3; //End Of Delay 2

int state = 0;
int event = 0;

boolean expDone = false;
boolean already_licking = false;
boolean led_is_on = false;
boolean response_made = false;
boolean lick_first_lick_happened = false;
unsigned long lastLickTime = 0;
int nLicksDuringDecision = 0;
int nDrops = 0;
int lightIntensityPWM = 0;

//////////////////////////////////////////////////////////
int nTrials  = 0;
int nRewards = 0;
int nLights = 0;
int consumptionLickCounter = 0;

//-------------------------------------------
//TTL EVENT TYPE //SERIAL CODE FOR PROCESSING
//-------------------------------------------
//-------------------------------------------
//TTL EVENT TYPE //SERIAL CODE FOR PROCESSING
//-------------------------------------------
const int TTL_EVT_PROGRAM_VERSION          = 1;
const int TTL_EVT_MAX_TRIAL_NUMBER         = 2;
const int TTL_EVT_MAX_REWARD_NUMBER        = 3;
const int TTL_EVT_MAX_SESSION_DURATION     = 4;
const int TTL_EVT_EXPERIMENT_START         = 5;
const int TTL_EVT_EXPERIMENT_STOP          = 6;
const int TTL_EVT_TRIAL_START              = 7;
const int TTL_EVT_TRIAL_STOP               = 8;
const int TTL_EVT_ITI_ON                   = 9;
const int TTL_EVT_ITI_OFF                  = 10;
const int TTL_EVT_ITI_MIN                  = 11;
const int TTL_EVT_ITI_MAX                  = 12;
const int TTL_EVT_LICK                     = 13;
const int TTL_EVT_SOLENOID_ON              = 14;
const int TTL_EVT_SOLENOID_DURATION        = 15;
const int TTL_EVT_SOLENOID_OFF             = 16;
const int TTL_EVT_LED_ON                   = 17;
const int TTL_EVT_LED_PWM                  = 18;
const int TTL_EVT_LED_DURATION             = 19;
const int TTL_EVT_LED_OFF                  = 20;
const int TTL_EVT_TONE5_ON                 = 21;
const int TTL_EVT_TONE5_FREQ               = 22;
const int TTL_EVT_TONE5_DURATION           = 23;
const int TTL_EVT_TONE5_OFF                = 24;
const int TTL_EVT_TONE2_ON                 = 25;
const int TTL_EVT_TONE2_FREQ               = 26;
const int TTL_EVT_TONE2_DURATION           = 27;
const int TTL_EVT_TONE2_OFF                = 28;
const int TTL_EVT_STATE                    = 29;
const int TTL_EVT_EVENT                    = 30;
const int TTL_EVT_CORRECT_REPONSE          = 31;
const int TTL_EVT_INCORRECT_RESPONSE       = 32;
const int TTL_EVT_OMISSION                 = 33;
const int TTL_EVT_ITI_DURATION             = 34;
const int TTL_EVT_EOD                      = 35;
const int TTL_EVT_STIM_TYPE                = 36;
const int TTL_EVT_STIM_ON                  = 37;
const int TTL_EVT_STIM_DURATION            = 38;
const int TTL_EVT_STIM_OFF                 = 39;
const int TTL_EVT_BLOCK_SIZE               = 40;
const int TTL_EVT_THRESHOLD                = 41;
const int TTL_EVT_LIGHT_INTENSITY_START    = 42;
const int TTL_EVT_LIGHT_INTENSITY_STEP     = 43;
const int TTL_EVT_NOLIGHT_NTRIALS          = 44;

const int TTL_EVT_MEGA_STATE               = 45;
const int TTL_EVT_SLOW_SEARCH_STEP         = 46;
const int TTL_EVT_FAST_SEARCH_STEP         = 47;
const int TTL_EVT_BASELINE_THRESHOLD       = 48;
const int TTL_EVT_SLOW_SEARCH_THRESHOLD    = 49;
const int TTL_EVT_FAST_SEARCH_THRESHOLD    = 50;
const int TTL_EVT_BASELINE_SIZE            = 51;
const int TTL_EVT_SLOW_SEARCH_SIZE         = 52;
const int TTL_EVT_FAST_SEARCH_SIZE         = 53;
const int TTL_EVT_SLOW_SEARCH_STARTING_POINT = 54;
const int TTL_EVT_NSUCC_TEST = 55;

const int TTL_EVT_LED_VOLTAGE_MV = 56;
const int TTL_EVT_OFFER_ACCEPTED = 57;
const int TTL_EVT_OFFER_REJECTED = 58;
const int TTL_EVT_AFTERTONEDELAYMSEC = 59;
const int TTL_EVT_RESPONSEDURATIONMSEC = 60;

const int TTL_EVT_DELAYBEFORETONEMSEC = 61;
const int TTL_EVT_DELAYAFTEROFFERMSEC = 62;

const int TTL_EVT_SERVOPOSITION = 63;

const int TTL_EVT_AFTERDECISIONDELAYMSEC = 64;
const int TTL_EVT_CONSUMPTIONPERIODMSEC  = 65;
const int TTL_EVT_CONSUMPTIONLICKNUMBER  = 66;
const int TTL_EVT_TRIALTYPE              = 67;
const int TTL_EVT_MAXWAITFORFIRSTLICKMSEC = 68;

const int TTL_EVT_QUENCHINGPERIODMSEC  = 69;
const int TTL_EVT_QUENCHINGLICKNUMBER  = 70;
const int TTL_EVT_REST_ON  = 71;
const int TTL_EVT_QUENCHING_ON  = 72;
const int TTL_BLOCK_NUMBER = 73;
const int TTL_CURRENT_BLOCK_NUMBER = 74;

const int TTL_CUE_LIGHT_INTENSITY_1   = 75;
const int TTL_CUE_LIGHT_INTENSITY_2   = 76;
const int TTL_OFFER_LIGHT_INTENSITY_1 = 77;
const int TTL_OFFER_LIGHT_INTENSITY_2 = 78;
const int TTL_CUE_LIGHT_DURATION_1    = 79;
const int TTL_CUE_LIGHT_DURATION_2    = 80;
const int TTL_OFFER_LIGHT_DURATION_1  = 81;
const int TTL_OFFER_LIGHT_DURATION_2  = 82;

const int TTL_EVT_OPTO_ON                  =  83;
const int TTL_EVT_OPTO_OFF                 = 84;
const int TTL_EVT_OPTO_POWER               =  85;
const int TTL_EVT_OPTO_WAVELENGTH          =  86;

const int TTL_EVT_REWARD_DURATION_1  = 87;
const int TTL_EVT_REWARD_DURATION_2  = 88;

const int TTL_EVT_NLICK_TOT  = 89;
const int TTL_EVT_NLICK_CURRENT  = 90;

const int TTL_EVT_NLICK_DURING_DECISION    = 91;
const int TTL_EVT_NDROPS                   = 92;

const int TTL_EVT_TONE6_ON                 = 93;
const int TTL_EVT_TONE6_FREQ               = 94;
const int TTL_EVT_TONE6_DURATION           = 95;
const int TTL_EVT_TONE6_OFF                = 96;


const int TTL_EVT_OFFER1_REW                = 97;
const int TTL_EVT_OFFER1_LIGHT              = 98;
const int TTL_EVT_OFFER2_REW                = 99;
const int TTL_EVT_OFFER2_LIGHT              = 100;
const int TTL_EVT_OFFER3_REW                = 101;
const int TTL_EVT_OFFER3_LIGHT              = 102;

const int TTL_EVT_TONE7_ON                 = 103;
const int TTL_EVT_TONE7_FREQ               = 104;
const int TTL_EVT_TONE7_DURATION           = 105;
const int TTL_EVT_TONE7_OFF                = 106;
const int TTL_EVT_TONE8_ON                 = 107;
const int TTL_EVT_TONE8_FREQ               = 108;
const int TTL_EVT_TONE8_DURATION           = 109;
const int TTL_EVT_TONE8_OFF                = 110;

const int TTL_EVT_OFFER1_REW                = 111;
const int TTL_EVT_OFFER1_LIGHT              = 112;
const int TTL_EVT_OFFER2_REW                = 113;
const int TTL_EVT_OFFER2_LIGHT              = 114;



void setup() {



  //Defines Inputs and Outputs
  pinMode(solenoidPin, OUTPUT);
  digitalWrite(solenoidPin, LOW);
  
  pinMode(toneFivePin, OUTPUT);
  digitalWrite(toneFivePin, HIGH);
  pinMode(toneSixPin, OUTPUT);
  digitalWrite(toneSixPin, HIGH); 
  pinMode(toneSevenPin, OUTPUT);
  digitalWrite(toneSevenPin, HIGH); 
  pinMode(toneEightPin, OUTPUT);
  digitalWrite(toneEightPin, HIGH); 
  pinMode(toneTwoPin, OUTPUT);
  digitalWrite(toneTwoPin, HIGH);
 
  pinMode(ledMatrixPin, OUTPUT);
  digitalWrite(ledMatrixPin, LOW);


  randomSeed(analogRead(1));

  myservo.attach(8);  // attaches the servo on pin 8 to the servo object
  myservo.write(servoHighPos);

  initTrialTypeArray();
  populateTrialTypeArray();

  Serial.begin(115200);          //  creates serial communication at 115200 bauds
  EstablishContact();

  currentTimeMsec = millis();
  SessionStartTime = currentTimeMsec;
  i_loop = 0;

  // send parameters
  SendData(currentTimeMsec, TTL_EVT_PROGRAM_VERSION, protocol);
  SendData(currentTimeMsec, TTL_EVT_EXPERIMENT_START, 0);
  SendData(currentTimeMsec, TTL_EVT_ITI_MIN, itiMinDurationMsec);
  SendData(currentTimeMsec, TTL_EVT_ITI_MAX, itiMaxDurationMsec);
  SendData(currentTimeMsec, TTL_EVT_SOLENOID_DURATION, rewardDeliveryDurationMsec);
  SendData(currentTimeMsec, TTL_EVT_MAX_TRIAL_NUMBER, maxTrialNumber);
  SendData(currentTimeMsec, TTL_EVT_MAX_REWARD_NUMBER, maxRewardNumber);
  SendData(currentTimeMsec, TTL_EVT_MAX_SESSION_DURATION, (int)(maxSessionDurationMsec / 1000));
  SendData(currentTimeMsec, TTL_EVT_TONE5_DURATION, toneDurationMsec);
  SendData(currentTimeMsec, TTL_EVT_TONE5_FREQ, toneOneFreq);
  SendData(currentTimeMsec, TTL_EVT_TONE6_DURATION, toneDurationMsec);
  SendData(currentTimeMsec, TTL_EVT_TONE6_FREQ, toneTwoFreq);
  SendData(currentTimeMsec, TTL_EVT_TONE7_DURATION, toneDurationMsec);
  SendData(currentTimeMsec, TTL_EVT_TONE7_FREQ, toneThreeFreq);
  SendData(currentTimeMsec, TTL_EVT_TONE8_DURATION, toneDurationMsec);
  SendData(currentTimeMsec, TTL_EVT_TONE8_FREQ, toneTwoFreq);
  SendData(currentTimeMsec, TTL_EVT_TONE2_DURATION, toneDurationMsec);
  SendData(currentTimeMsec, TTL_EVT_TONE2_FREQ, toneThreeFreq);
  SendData(currentTimeMsec, TTL_EVT_LED_VOLTAGE_MV, ledVoltage_mv);
  
  SendData(currentTimeMsec, TTL_EVT_OFFER1_REW, offer1_rew);
  SendData(currentTimeMsec, TTL_EVT_OFFER1_LIGHT, offer1_light); 
  SendData(currentTimeMsec, TTL_EVT_OFFER2_REW, offer2_rew);
  SendData(currentTimeMsec, TTL_EVT_OFFER2_LIGHT, offer2_light);   
  SendData(currentTimeMsec, TTL_EVT_OFFER3_REW, offer3_rew);
  SendData(currentTimeMsec, TTL_EVT_OFFER3_LIGHT, offer3_light);   
  SendData(currentTimeMsec, TTL_EVT_OFFER4_REW, offer2_rew);
  SendData(currentTimeMsec, TTL_EVT_OFFER4_LIGHT, offer2_light);   
  SendData(currentTimeMsec, TTL_EVT_OFFER5_REW, offer3_rew);
  SendData(currentTimeMsec, TTL_EVT_OFFER5_LIGHT, offer3_light);   

  SendData(currentTimeMsec, TTL_EVT_AFTERTONEDELAYMSEC, (int)afterToneDelayMsec);
  SendData(currentTimeMsec, TTL_EVT_RESPONSEDURATIONMSEC, (int)reponsePeriodDurationMsec);
  SendData(currentTimeMsec, TTL_EVT_AFTERDECISIONDELAYMSEC, (int)afterDecisionDelayMsec);

  delay1 = random(itiMinDurationMsec, itiMaxDurationMsec);
  SendData(currentTimeMsec, TTL_EVT_ITI_ON, 0);
  SendData(currentTimeMsec, TTL_EVT_ITI_DURATION, delay1);
  delay1 = currentTimeMsec + delay1;
  state = stateITI;
  SendData(currentTimeMsec, TTL_EVT_STATE, state);

  SendData(currentTimeMsec, TTL_EVT_SERVOPOSITION, servoLowPos);
  myservo.write(servoLowPos);

}


void loop()
{
  currentTimeMsec = millis();
  event = 0;
  //////////////////////////////////////////////////////////////////////////////////////////
  if (event == 0)
  {
    detect_EOD();
  }
  //////////////////////////////////////////////////////////////////////////////////////////
  if (event == 0)
  {
    detect_EOD2();
  }  
  //////////////////////////////////////////////////////////////////////////////////////////
  if (event == 0)
  {
    detect_LICK();
    //detect_LICK2();
  }
  //////////////////////////////////////////////////////////////////////////////////////////

  switch (state)
  {
    case stateITI :
      switch (event)
      {
        case evt_EOD :
          SendData(currentTimeMsec, TTL_EVT_ITI_OFF, delay1);
          expDone = checkIfExpDone();
          if (expDone)
          {
            state = stateExpDone;
            SendData(currentTimeMsec, TTL_EVT_STATE, state);
            SendData(currentTimeMsec, TTL_EVT_EXPERIMENT_STOP, 0);
          }
          else
          {
            if (state < stateExpDone)
            {
              nTrials++;
              SendData(currentTimeMsec, TTL_EVT_TRIAL_START, nTrials);
              trialType = trialTypeArray[nTrials - 1];
              SendData(currentTimeMsec, TTL_EVT_TRIALTYPE, trialType);
              switch (trialType)
              {
                case 0:
                  SendData(currentTimeMsec, TTL_EVT_TONE5_ON, 0);
                  digitalWrite(toneFivePin, LOW);
                  break;
                case 1:
                  SendData(currentTimeMsec, TTL_EVT_TONE6_ON, 0);
                  digitalWrite(toneSixPin, LOW);
                  break;
                case 2:
                  SendData(currentTimeMsec, TTL_EVT_TONE7_ON, 0);
                  digitalWrite(toneSevenPin, LOW);
                  break;
				case 3:
                  SendData(currentTimeMsec, TTL_EVT_TONE8_ON, 0);
                  digitalWrite(toneEightPin, LOW);
                  break;
				case 4:
                  SendData(currentTimeMsec, TTL_EVT_TONE2_ON, 0);
                  digitalWrite(toneTwoPin, LOW);
                  break;
              }
              delay1 = toneDurationMsec + currentTimeMsec;
              state = stateToneOn;
              SendData(currentTimeMsec, TTL_EVT_STATE, state);
            }
          }
          break;
      }
      break;

    case stateToneOn:
      switch (event)
      {
        case evt_EOD :
          switch (trialType)
          {
			case 0:
			  SendData(currentTimeMsec, TTL_EVT_TONE5_OFF, 0);
			  digitalWrite(toneFivePin, High);
			  break;
			case 1:
			  SendData(currentTimeMsec, TTL_EVT_TONE6_OFF, 0);
			  digitalWrite(toneSixPin, High);
			  break;
			case 2:
			  SendData(currentTimeMsec, TTL_EVT_TONE7_OFF, 0);
			  digitalWrite(toneSevenPin, High);
			  break;
			case 3:
			  SendData(currentTimeMsec, TTL_EVT_TONE8_OFF, 0);
			  digitalWrite(toneEightPin, High);
			  break;
			case 4:
			  SendData(currentTimeMsec, TTL_EVT_TONE2_OFF, 0);
			  digitalWrite(toneTwoPin, High);
			  break;
          }
          state = stateDelayAfterTone;
          delay1 = currentTimeMsec + afterToneDelayMsec;
          SendData(currentTimeMsec, TTL_EVT_STATE, state);
          break;
      }
      break;

    case stateDelayAfterTone:
      switch (event)
      {
        case evt_EOD :
          state = stateResponsePeriod;
          nLicksDuringDecision = 0;
          delay1 = reponsePeriodDurationMsec;
          delay1 = delay1 + currentTimeMsec;
          SendData(currentTimeMsec, TTL_EVT_STATE, state);
          SendData(currentTimeMsec, TTL_EVT_SERVOPOSITION, servoHighPos);
          myservo.write(servoHighPos);
          response_made = false;
          break;
      }
      break;

    case stateResponsePeriod:
      switch (event)
      {
        case evt_EOD :
          SendData(currentTimeMsec, TTL_EVT_NLICK_DURING_DECISION, nLicksDuringDecision);
          nDrops = 0; lightIntensityPWM = 0;
          switch (trialType)
          {
		  	//Non-progressive case: generalize this! 
			case 0:
              nDrops = 5;
			  lightIntensityPWM = 1;
              break;
            case 1:
			  nDrops = 4;
              lightIntensityPWM = 30;
              break;
			case 2:
			  nDrops = 3;
              lightIntensityPWM = 60;
              break;
			case 3:
			  nDrops = 2;
              lightIntensityPWM = 120;
              break;
			case 4:
              lightIntensityPWM = 240;
              break;		  

//		    //Non-progressive case
//			case 0:
//              nDrops = getDropNumber(nLicksDuringDecision, nLick1);
//              break;
//            case 1:
//			  nDrops = getDropNumber(nLicksDuringDecision, nLick1);
//              lightIntensityPWM = getLightIntensity(nLicksDuringDecision, nLick1);
//              break;
//			case 2:
//			  nDrops = getDropNumber(nLicksDuringDecision, nLick1);
//              lightIntensityPWM = getLightIntensity(nLicksDuringDecision, nLick1);
//              break;
//			case 3:
//			  nDrops = getDropNumber(nLicksDuringDecision, nLick1);
//              lightIntensityPWM = getLightIntensity(nLicksDuringDecision, nLick1);
//              break;
//			case 4:
//              lightIntensityPWM = getLightIntensity(nLicksDuringDecision, nLick1);
//              break;		
			  
//            case 0:
//              //nDrops = getDropNumber(nLicksDuringDecision, nLick1);
//			  nDrops=getDropNumber(nLicksDuringDecision,nLick1,nLick2);
//              break;
//            case 1:
//              //lightIntensityPWM = getLightIntensity(nLicksDuringDecision, nLick1);
//			  lightIntensityPWM=getLightIntensity(nLicksDuringDecision,nLick1,nLick2);
//              //nDrops = getDropNumber(nLicksDuringDecision, nLick1);
//			  nDrops=getDropNumber(nLicksDuringDecision,nLick1,nLick2);
//              break;
//			case 2:
//              //lightIntensityPWM = getLightIntensity(nLicksDuringDecision, nLick1);
//			  lightIntensityPWM=getLightIntensity(nLicksDuringDecision,nLick1,nLick2);
//              //nDrops = getDropNumber(nLicksDuringDecision, nLick1);
//			  nDrops=getDropNumber(nLicksDuringDecision,nLick1,nLick2);
//              break;
//			case 3:
//              //lightIntensityPWM = getLightIntensity(nLicksDuringDecision, nLick1);
//			  lightIntensityPWM=getLightIntensity(nLicksDuringDecision,nLick1,nLick2);
//              //nDrops = getDropNumber(nLicksDuringDecision, nLick1);
//			  nDrops=getDropNumber(nLicksDuringDecision,nLick1,nLick2);
//              break;
//			case 4:
//              //lightIntensityPWM = getLightIntensity(nLicksDuringDecision, nLick1);
//			  lightIntensityPWM=getLightIntensity(nLicksDuringDecision,nLick1,nLick2);
//              break;
          }
          SendData(currentTimeMsec, TTL_EVT_SERVOPOSITION, servoLowPos);
          myservo.write(servoLowPos);
          delay1 = currentTimeMsec + afterDecisionDelayMsec;
          state = stateDelayAfterDecision;
          SendData(currentTimeMsec, TTL_EVT_STATE, state);
          break;

        case evt_LICK :
          nLicksDuringDecision++;
          break;
      }
      break;

    case stateDelayAfterDecision:
      switch (event)
      {
        case evt_EOD :
          SendData(currentTimeMsec, TTL_EVT_SERVOPOSITION, servoHighPos);
          myservo.write(servoHighPos);

            switch (trialType)
            {
              case 0:
                SendData(currentTimeMsec, TTL_EVT_LED_ON, 0);
                SendData(currentTimeMsec, TTL_EVT_LED_PWM, lightIntensityPWM);
                SendData(currentTimeMsec, TTL_EVT_LED_DURATION, (int)lightDurationMsec);
                analogWrite(ledMatrixPin, lightIntensityPWM);
                delay2 = lightDurationMsec + currentTimeMsec;
                SendData(currentTimeMsec, TTL_EVT_NDROPS, nDrops);
                SendData(currentTimeMsec,  TTL_EVT_SOLENOID_ON, 0);
                digitalWrite(solenoidPin, HIGH);
                delay(rewardDeliveryDurationMsec);
                digitalWrite(solenoidPin, LOW);
                SendData(currentTimeMsec,  TTL_EVT_SOLENOID_OFF, 0);
                nDrops--;
                state = stateWaitingFirstLick;
                SendData(currentTimeMsec, TTL_EVT_STATE, state);         
                break;
                
              case 1: 
                SendData(currentTimeMsec, TTL_EVT_LED_ON, 0);
                SendData(currentTimeMsec, TTL_EVT_LED_PWM, lightIntensityPWM);
                SendData(currentTimeMsec, TTL_EVT_LED_DURATION, (int)lightDurationMsec);
                analogWrite(ledMatrixPin, lightIntensityPWM);
                delay2 = lightDurationMsec + currentTimeMsec;
                SendData(currentTimeMsec, TTL_EVT_NDROPS, nDrops);
                SendData(currentTimeMsec,  TTL_EVT_SOLENOID_ON, 0);
                digitalWrite(solenoidPin, HIGH);
                delay(rewardDeliveryDurationMsec);
                digitalWrite(solenoidPin, LOW);
                SendData(currentTimeMsec,  TTL_EVT_SOLENOID_OFF, 0);
                nDrops--;
                state = stateWaitingFirstLick;
                SendData(currentTimeMsec, TTL_EVT_STATE, state);         
                break;
                
              case 2: 
                SendData(currentTimeMsec, TTL_EVT_LED_ON, 0);
                SendData(currentTimeMsec, TTL_EVT_LED_PWM, lightIntensityPWM);
                SendData(currentTimeMsec, TTL_EVT_LED_DURATION, (int)lightDurationMsec);
                analogWrite(ledMatrixPin, lightIntensityPWM);
                delay2 = lightDurationMsec + currentTimeMsec;
                SendData(currentTimeMsec, TTL_EVT_NDROPS, nDrops);
                SendData(currentTimeMsec,  TTL_EVT_SOLENOID_ON, 0);
                digitalWrite(solenoidPin, HIGH);
                delay(rewardDeliveryDurationMsec);
                digitalWrite(solenoidPin, LOW);
                SendData(currentTimeMsec,  TTL_EVT_SOLENOID_OFF, 0);
                nDrops--;
                state = stateWaitingFirstLick;
                SendData(currentTimeMsec, TTL_EVT_STATE, state);         
                break;
				                
              case 3: 
                SendData(currentTimeMsec, TTL_EVT_LED_ON, 0);
                SendData(currentTimeMsec, TTL_EVT_LED_PWM, lightIntensityPWM);
                SendData(currentTimeMsec, TTL_EVT_LED_DURATION, (int)lightDurationMsec);
                analogWrite(ledMatrixPin, lightIntensityPWM);
                delay2 = lightDurationMsec + currentTimeMsec;
                SendData(currentTimeMsec, TTL_EVT_NDROPS, nDrops);
                SendData(currentTimeMsec,  TTL_EVT_SOLENOID_ON, 0);
                digitalWrite(solenoidPin, HIGH);
                delay(rewardDeliveryDurationMsec);
                digitalWrite(solenoidPin, LOW);
                SendData(currentTimeMsec,  TTL_EVT_SOLENOID_OFF, 0);
                nDrops--;
                state = stateWaitingFirstLick;
                SendData(currentTimeMsec, TTL_EVT_STATE, state);         
                break;
				
			  case 4:
                SendData(currentTimeMsec, TTL_EVT_LED_ON, 0);
                SendData(currentTimeMsec, TTL_EVT_LED_PWM, lightIntensityPWM);
                SendData(currentTimeMsec, TTL_EVT_LED_DURATION, (int)lightDurationMsec);
                analogWrite(ledMatrixPin, lightIntensityPWM);
                delay1 = lightDurationMsec + currentTimeMsec;
                state = stateLightOn;
                SendData(currentTimeMsec, TTL_EVT_STATE, state);
                break;
                
            }
          nLicksDuringDecision = 0;
          break;
      }
      break;

    case stateLightOn:
      switch (event)
      {
        case evt_EOD :
          analogWrite(ledMatrixPin, 0);
          SendData(currentTimeMsec, TTL_EVT_LED_OFF, 0);
          SendData(currentTimeMsec, TTL_EVT_SERVOPOSITION, servoLowPos);
          myservo.write(servoLowPos);
          delay1 = random(itiMinDurationMsec, itiMaxDurationMsec);
          SendData(currentTimeMsec, TTL_EVT_ITI_ON, 0);
          SendData(currentTimeMsec, TTL_EVT_ITI_DURATION, delay1);
          delay1 = currentTimeMsec + delay1;
          state = stateITI;
          SendData(currentTimeMsec, TTL_EVT_STATE, state);
          break;
      }
      break;

    case stateWaitingFirstLick:
      switch (event)
      {
        
        case evt_EOD2 :
          analogWrite(ledMatrixPin, 0);
          SendData(currentTimeMsec, TTL_EVT_LED_OFF, 0);         
          break;        
        
        case evt_LICK :
          delay1 = consumptionPeriodMsec + currentTimeMsec;
          state = stateIRI;
          SendData(currentTimeMsec, TTL_EVT_STATE, state);
          break;

      }
      break;

    case stateIRI:
      switch (event)
      {

        case evt_EOD2 :
          analogWrite(ledMatrixPin, 0);
          SendData(currentTimeMsec, TTL_EVT_LED_OFF, 0);    
          if (delay1==0)
          {
            SendData(currentTimeMsec, TTL_EVT_SERVOPOSITION, servoLowPos);
            myservo.write(servoLowPos);
            delay1 = random(itiMinDurationMsec, itiMaxDurationMsec);
            SendData(currentTimeMsec, TTL_EVT_ITI_ON, 0);
            SendData(currentTimeMsec, TTL_EVT_ITI_DURATION, delay1);
            delay1 = currentTimeMsec + delay1;
            state = stateITI;
            SendData(currentTimeMsec, TTL_EVT_STATE, state);
          }       
          break;    
                  
        case evt_EOD :
          if (nDrops > 0)
          {
            SendData(currentTimeMsec,  TTL_EVT_SOLENOID_ON, 0);
            digitalWrite(solenoidPin, HIGH);
            delay(rewardDeliveryDurationMsec);
            digitalWrite(solenoidPin, LOW);
            SendData(currentTimeMsec,  TTL_EVT_SOLENOID_OFF, 0);
            nDrops--;
            state = stateWaitingFirstLick;
            SendData(currentTimeMsec, TTL_EVT_STATE, state);
          }
          else
          {
            if (delay2==0)
            {
              SendData(currentTimeMsec, TTL_EVT_SERVOPOSITION, servoLowPos);
              myservo.write(servoLowPos);
              delay1 = random(itiMinDurationMsec, itiMaxDurationMsec);
              SendData(currentTimeMsec, TTL_EVT_ITI_ON, 0);
              SendData(currentTimeMsec, TTL_EVT_ITI_DURATION, delay1);
              delay1 = currentTimeMsec + delay1;
              state = stateITI;
              SendData(currentTimeMsec, TTL_EVT_STATE, state);
            }            
          }
          break;
      }
      break;

    case stateExpDone:  // 10: End of experiment
      delay(3600000);
      break;
  }

  //////////////////

  previousTimeMsec = currentTimeMsec;

  i_loop++;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// aditional functions
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void EstablishContact() {
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB
  }

  while (!processingIsReady) {
    if (Serial.available() > 0) {
      incomingByte = Serial.read();
      Serial.println("Let's Go!");
      processingIsReady = true;
    }
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
boolean checkIfExpDone()
{
  boolean retVal = false;

  if (maxTrialNumber > 0)
  {
    if (nTrials >= maxTrialNumber)
    {
      retVal = true;
    }
  }
  if (maxRewardNumber > 0)
  {
    if (nRewards >= maxRewardNumber)
    {
      retVal = true;
    }
  }
  if (maxSessionDurationMsec > 0)
  {
    if (currentTimeMsec >= (maxSessionDurationMsec + SessionStartTime))
    {
      retVal = true;
    }
  }

  return retVal;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// To send behavioral data using the usb port
// this data will be received by procesggin (or java) and printed in a file
// the format of the sent data is always time (msec), tabulation, code describing the value,
// tabulation  the value itself
void SendData(unsigned long time_, int code_, int val_)
{
  Serial.print(time_);
  Serial.print("\t");
  Serial.print(code_);
  Serial.print("\t");
  Serial.println(val_);
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void detect_EOD()
{
  if (delay1)
  {
    if (currentTimeMsec >= delay1)
    {
      delay1 = 0;
      event = evt_EOD;
      SendData(currentTimeMsec, TTL_EVT_EOD, evt_EOD);
    }
  }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void detect_EOD2()
{
  if (delay2)
  {
    if (currentTimeMsec >= delay2)
    {
      delay2 = 0;
      event = evt_EOD2;
      SendData(currentTimeMsec, TTL_EVT_EOD, evt_EOD2);
    }
  }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void detect_LICK()
{
  int v = analogRead(lickoPin);
  if (v > 500)
  {
    if (already_licking == false)
    {
      if (currentTimeMsec > (lastLickTime + 5))
      {
        event = evt_LICK;
        SendData(currentTimeMsec, TTL_EVT_LICK, v);
        lastLickTime = currentTimeMsec;
      }
    }
    already_licking = true;
  }
  if (v < 400)
  {
    already_licking = false;
  }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//void detect_LICK()
//{
//  int v = analogRead(lickoPin2);
//  if (v > 15)
//  {
//    if (already_licking == false)
//    {
//      if (currentTimeMsec > (lastLickTime + 5))
//      {
//        event = evt_LICK;
//        SendData(currentTimeMsec, TTL_EVT_LICK, v);
//        lastLickTime = currentTimeMsec;
//      }
//    }
//    already_licking = true;
//  }
//  if (v < 10)
//  {
//    already_licking = false;
//  }
//}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void populateTrialTypeArray()
{
  int i;
  for (i = 0; i < trialTypeSize; i++) {
    trialTypeArray[i] = random(3);
  }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void initTrialTypeArray()
{
  int i;
  for (i = 0; i < trialTypeSize; i++) {
    trialTypeArray[i] = 0;
  }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void printTrialTypeArray()
{
  int i;
  for (i = 0; i < trialTypeSize; i++) {
    Serial.print(F("tt["));
    Serial.print(i);
    Serial.print(F("]="));
    Serial.println(trialTypeArray[i]);
  }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//int getDropNumber(int nLicksDuringDecision_, int nLick1_)
//{
//  int nDrops_ = 0;
//  if (nLicksDuringDecision_ >= nLick1_)
//  {
//    nDrops_ = 3;
//  }
//  return (nDrops_);
//}

int getDropNumber(int nLicksDuringDecision_,int nLick1_,int nLick2_)
{
  int nDrops_=0;
  if (nLicksDuringDecision_ < nLick1_)
  {
    nDrops_=1;
  }
  else  
  {      
    if (nLicksDuringDecision_ < nLick2_)
    {
      nDrops_=3;
    }
    else
    {
      nDrops_=6;
    }
  } 
  return(nDrops_);  
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//int getLightIntensity(int nLicksDuringDecision_, int nLick1_)
//{
//  int lightIntensity_ = 1; //4 lux
//  if (nLicksDuringDecision_ >= nLick1_)
//  {
//    lightIntensity_ = 50; //100 lux
//  }
//  return ((int)(lightIntensity_));
//}

int getLightIntensity(int nLicksDuringDecision_,int nLick1_,int nLick2_)
{
  int lightIntensity_=0;
  if (nLicksDuringDecision_ < nLick1_)
  {
    lightIntensity_=1;//10 lux
  }
  else  
  {      
    if (nLicksDuringDecision_ < nLick2_)
    {
      lightIntensity_=29;//61 lux
    }
    else
    {
      lightIntensity_=220;//404 lux
    }
  } 
  return(lightIntensity_);  
}









